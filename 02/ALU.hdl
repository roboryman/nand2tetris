// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit):
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 *
 * PINS:
 *  + IN: x[16], y[16], zx, nx, zy, ny, f, no
 *  + OUT: out[16], zr, ng
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // zx/nx logic
    Mux16(a=x, b=false, sel=zx, out=zxLogic);
    Not16(in=zxLogic, out=notZxLogic);
    Mux16(a=zxLogic, b=notZxLogic, sel=nx, out=nxLogic);

    // zy/ny logic
    Mux16(a=y, b=false, sel=zy, out=zyLogic);
    Not16(in=zyLogic, out=notZyLogic);
    Mux16(a=zyLogic, b=notZyLogic, sel=ny, out=nyLogic);

    // f Logic
    And16(a=nxLogic, b=nyLogic, out=nxAndNyLogic);
    Add16(a=nxLogic, b=nyLogic, out=nxAddNyLogic);
    Mux16(a=nxAndNyLogic, b=nxAddNyLogic, sel=f, out=fLogic);

    // out/ng Logic
    Not16(in=fLogic, out=notFLogic);
    Mux16(a=fLogic, b=notFLogic, sel=no, out=out, out[15]=ng, out[0..7]=outLogicFirstHalf, out[8..15]=outLogicSecondHalf);

    // zr logic
    Or8Way(in=outLogicFirstHalf, out=zrLogicFirstHalf);
    Or8Way(in=outLogicSecondHalf, out=zrLogicSecondHalf);
    Or(a=zrLogicFirstHalf, b=zrLogicSecondHalf, out=zrLogic);
    Not(in=zrLogic, out=zr);
}
